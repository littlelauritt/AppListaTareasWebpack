{"version":3,"sources":["webpack://app-lista-tareas/webpack/bootstrap","webpack://app-lista-tareas/webpack/runtime/define property getters","webpack://app-lista-tareas/webpack/runtime/hasOwnProperty shorthand","webpack://app-lista-tareas/./src/classes/tarea.class.js","webpack://app-lista-tareas/./src/js/components.js","webpack://app-lista-tareas/./src/index.js","webpack://app-lista-tareas/./src/classes/listatareas.class.js"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Tarea","constructor","tarea","this","id","Date","getTime","completado","fecha","nuevaTarea","document","querySelector","ul","borrarCompletados","filtros","filtrosMarco","querySelectorAll","footer","numeroTareasPend","anadirtareaHTML","tareasHTML","innerHTML","mostrarFooter","listaTareas","length","classList","remove","add","mostrarPendientes","contarPendientes","filter","textContent","mostrarBorrarCompletadas","addEventListener","evento","value","trim","nuevaTareaCreada","anadirTarea","nombreElemento","target","localName","tareaSeleccionada","parentElement","tareaId","dataset","marcarCompletado","toggle","eliminarTarea","removeChild","eliminarCompletados","index","children","elemento","contains","forEach","filtro","textoFiltroSeleccionado","text","etiquetaSeleccionada","setAttribute","textoLabel","removeAttribute","guardarLocalStorage","cargarLocalStorage","push","localStorage","setItem","JSON","stringify","getItem","parse"],"mappings":"mBACA,IAAIA,EAAsB,CCA1B,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3E,EAAwB,CAACM,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,kBCC3E,MAAMI,EACTC,YAAaC,GACTC,KAAKD,MAAQA,EAGbC,KAAKC,IAAK,IAAIC,MAAOC,UAErBH,KAAKI,YAAa,EAClBJ,KAAMK,MAAQ,IAAIH,MCH1B,MAAMI,EAAaC,SAASC,cAAc,aAEpCC,EAAKF,SAASC,cAAc,cAE5BE,EAAoBH,SAASC,cAAc,oBAE3CG,EAAUJ,SAASC,cAAc,YAEjCI,EAAeL,SAASM,iBAAiB,WAEzCC,EAASP,SAASC,cAAc,WAEtC,IAAIO,EAAmBR,SAASC,cAAc,UAIvC,MAAMQ,EAAmBjB,IAC5B,MAAMkB,EAAa,oBACLlB,EAAgB,WAAI,YAAc,gBAAgBA,EAAME,8FAEzBF,EAAgB,WAAI,UAAY,8BACjEA,EAAMA,gMAMNU,EAAGS,WAAaD,GAIlBE,EAAgB,KAEU,IAAnCC,EAAYA,YAAYC,OAAiBP,EAAOQ,UAAUC,OAAO,UAAcT,EAAOQ,UAAUE,IAAI,WAG5FC,EAAoB,KAC7B,MAAMC,EAAmBN,EAAYA,YAAYO,QAAQ5B,IAA+B,IAArBA,EAAMK,aACzEW,EAAiBa,YAAcF,EAAiBL,QAGvCQ,EAA2B,KACbT,EAAYA,YAAYO,QAAS5B,IAA+B,IAArBA,EAAMK,aACxDiB,OAAS,EAAMX,EAAkBY,UAAUC,OAAO,UAAcb,EAAkBY,UAAUE,IAAI,WAKpHlB,EAAWwB,iBAAiB,SAAUC,IAElC,GAAmB,UAAfA,EAAO7C,KAAmBoB,EAAW0B,MAAMC,OAAOZ,OAAS,EAAE,CAE7D,MAAMa,EAAmB,IAAIrC,EAAMS,EAAW0B,OAE9CZ,EAAYe,YAAYD,GAExBlB,EAAgBkB,GAEhB5B,EAAW0B,MAAQ,GAEvBb,IACAM,IACAI,OAGJpB,EAAGqB,iBAAkB,SAAWC,IAG5B,MAAMK,EAAoBL,EAAOM,OAAOC,UAElCC,EAAoBR,EAAOM,OAAOG,cAAcA,cAEhDC,EAAoBF,EAAkBG,QAAQzC,GAG7B,UAAnBmC,IACAhB,EAAYuB,iBAAkBF,GAE9BF,EAAkBjB,UAAUsB,OAAQ,cAEjB,WAAnBR,IACAhB,EAAYyB,cAAeJ,GAC3BhC,EAAGqC,YAAaP,IAEpBpB,IACAM,IACAI,OAGJnB,EAAkBoB,iBAAiB,SAAS,KAExCV,EAAY2B,sBAGZ,IAAM,IAAIC,EAAQvC,EAAGwC,SAAS5B,OAAS,EAAG2B,GAAS,EAAGA,IAAS,CAE3D,MAAME,EAAWzC,EAAGwC,SAAUD,GAE1BE,EAAS5B,UAAU6B,SAAS,cAC5BD,EAAS3B,SAGjBJ,IACAM,IACAI,OAIJlB,EAAQmB,iBAAiB,SAAUC,IAE/BnB,EAAawC,SAAUC,GAAWA,EAAO/B,UAAUC,OAAO,cAE1DQ,EAAOM,OAAOf,UAAUE,IAAI,YAE5B,MAAM8B,EAA0BvB,EAAOM,OAAOkB,KAE9C,GAAKD,EAEL,IAAKJ,YAAYzC,EAAGwC,SAKhB,OAFAC,SAAS5B,UAAUC,OAAO,UAElB+B,GACR,IAAK,aAEGJ,SAAS5B,UAAU6B,SAAS,cAC5BD,SAAS5B,UAAUE,IAAI,UAE3B,MACA,IAAK,cAEG0B,SAAS5B,UAAU6B,SAAS,cAC5BD,SAAS5B,UAAUE,IAAI,cAO3Cf,EAAGqB,iBAAiB,YAAaC,IAC7B,MAAMK,EAAiBL,EAAOM,OAAOC,UAC/BC,EAAoBR,EAAOM,OAAOG,cAAcA,cAChDC,EAAUF,EAAkBG,QAAQzC,GAE1C,GAAuB,UAAnBmC,EAA2B,CAC3B,MAAMoB,EAAuBjB,EAAkBU,SAAS,GAAGA,SAAS,GACpEO,EAAqBC,aAAa,mBAAkB,GACpDD,EAAqBC,aAAa,QAAS,0BAE3CD,EAAqB1B,iBAAiB,YAAaC,IAC/C,GAAkB,UAAfA,EAAO7C,IAAgB,CAEtB,MAAMwE,EAAaF,EAAqBtC,UACxCsC,EAAqBC,aAAa,mBAAmB,GACrDD,EAAqBG,gBAAgB,SAErCvC,EAAYA,YAAYgC,SAAUrD,IAE3BA,EAAME,IAAMwC,IACX1C,EAAMA,MAAQ2D,EAEdtC,EAAYwC,kCC/J7B,MAAMxC,EAAc,ICTpB,MACHtB,cAGIE,KAAK6D,qBAKT1B,YAAapC,GACTC,KAAKoB,YAAY0C,KAAM/D,GACvBC,KAAK4D,sBAGTf,cAAc5C,GACVD,KAAKoB,YAAcpB,KAAKoB,YAAYO,QAAS5B,GAAUA,EAAME,IAAMA,IACnED,KAAK4D,sBAGTb,sBAEI/C,KAAKoB,YAAcpB,KAAKoB,YAAYO,QAAS5B,IAA+B,IAArBA,EAAMK,aAC7DJ,KAAK4D,sBAETjB,iBAAiB1C,GAEb,IAAI,MAAMF,KAASC,KAAKoB,YACpB,GAAGrB,EAAME,IAAMA,EAAI,CAGfF,EAAMK,YAAcL,EAAMK,WAC1BJ,KAAK4D,sBACL,OAIZA,sBACIG,aAAaC,QAAQ,SAAUC,KAAKC,UAAUlE,KAAKoB,cAEvDyC,qBAQI7D,KAAKoB,YAAe2C,aAAaI,QAAS,UAAeF,KAAKG,MAAOL,aAAaI,QAAS,WAAgB,KDpCnH/C,EAAYA,YAAYgC,SAASrD,GAAUiB,EAAgBjB,KAC3DoB,IACAM,IACAI,K","file":"6bfd8e52d4c6f13d2ecd.bundle.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// Vamos a tener una clase que es la tarea, esta recibirá una tarea nueva y a partir de ahi creará una serie de datos\r\nexport class Tarea {\r\n    constructor (tarea) {\r\n        this.tarea = tarea;   \r\n\r\n        // Necesitamos un identificador unico para cada tarea\r\n        this.id = new Date().getTime();\r\n        // Necesitamos saber si las tareas están completadas o no\r\n        this.completado = false;\r\n        this. fecha = new Date();\r\n    }\r\n}","import { Tarea } from \"../classes/index\";\r\nimport { listaTareas } from \"../index\";\r\n\r\n\r\n//  ---------- VARIABLES COGIDAS DEL DOMHTML ----------  //\r\n// Cojo el input donde escribimos las tareas\r\nconst nuevaTarea = document.querySelector('.new-todo');\r\n// Cojo el padre de las li, que es el elemento ul\r\nconst ul = document.querySelector('.todo-list');\r\n// Cojo el boton de eliminar completados del HTML\r\nconst borrarCompletados = document.querySelector('.clear-completed');\r\n// Cojo la lista donde se encuentran los botones que realizan los filtros\r\nconst filtros = document.querySelector('.filters');\r\n// Cojo cada uno de los filtros para poder recorrer el vector\r\nconst filtrosMarco = document.querySelectorAll('.filtro');\r\n// Cojo el footer para ocultarlo cuando no hay ninguna tarea\r\nconst footer = document.querySelector('.footer');\r\n// Cojo el strong donde se muestran el numero de tareas pendientes\r\nlet numeroTareasPend = document.querySelector('strong');\r\n\r\n//  ---------- FUNCIONES ----------  //\r\n// Funcion que sirve paraa que cuando escribamos una tarea se renderice en el HTML\r\nexport const anadirtareaHTML = (tarea) => {\r\n    const tareasHTML = `\r\n    <li class=\"${(tarea.completado) ? 'completed' : ''}\" data-id=\"${tarea.id}\">\r\n\t\t\t\t\t\t<div class=\"view\">\r\n\t\t\t\t\t\t\t<input class=\"toggle\" type=\"checkbox\" \"${(tarea.completado) ? 'checked' : ''}\">\r\n\t\t\t\t\t\t\t<label>${tarea.tarea}</label>\r\n\t\t\t\t\t\t\t<button class=\"destroy\"></button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t    <input class=\"edit\" value=\"Create a TodoMVC template\">\r\n\t\t\t\t\t</li>\r\n                `\r\n                ul.innerHTML += tareasHTML;\r\n}\r\n\r\n// Funcion que muestra y oculta el footer en funcion de si hay tareas o no\r\n export const mostrarFooter = () => {\r\n    // Si hay algo en la lista de tareas lo muestras y si no lo ocultas\r\n    (listaTareas.listaTareas.length !== 0) ? (footer.classList.remove('hidden')) : (footer.classList.add('hidden'));\r\n}\r\n// Funcion que muestra y oculta el numero de elementos pendientes en un span dentro del footer\r\nexport const mostrarPendientes = () => {\r\n    const contarPendientes = listaTareas.listaTareas.filter((tarea) => tarea.completado === false);\r\n    numeroTareasPend.textContent = contarPendientes.length;\r\n}\r\n// Funcion que muestra el boton de eliminar completadas cuando hay tareas ya hechas\r\nexport const mostrarBorrarCompletadas = ( () =>{\r\n    const hayCompletadas = listaTareas.listaTareas.filter( (tarea) => tarea.completado === true);\r\n    (hayCompletadas.length > 0) ? (borrarCompletados.classList.remove('hidden')) : (borrarCompletados.classList.add('hidden'));\r\n})\r\n\r\n//  ---------- EVENTOS ----------  //\r\n// Evento que al pulsar la tecla enter añade la tarea\r\nnuevaTarea.addEventListener('keyup', (evento) => {\r\n    // Hacemos una condicion que será si pulsa la tecla Enter y si hay contenido dentro del input de tipo texto y le añadimos el metodo trim para eliminar espacios al inicio\r\n    if (evento.key === 'Enter' && nuevaTarea.value.trim().length > 0){\r\n        // Creo una nueva instancia a la tarea\r\n        const nuevaTareaCreada = new Tarea(nuevaTarea.value);\r\n        // Añadimos la nueva tarea al vector\r\n        listaTareas.anadirTarea(nuevaTareaCreada);\r\n        // Añadimos la tarea al HTML\r\n        anadirtareaHTML(nuevaTareaCreada);\r\n        // Borramos el contenido del input de texto\r\n        nuevaTarea.value = '';\r\n    }\r\n    mostrarFooter();\r\n    mostrarPendientes();\r\n    mostrarBorrarCompletadas();\r\n})\r\n// Evento que marca los elementos como completados y da funcionalidad al botón de borrar\r\nul.addEventListener( 'click', ( evento ) => {\r\n    // Hacemos click en una de las partes del texto y tenemos que saber donde pulsamos, tenemos una propiedad en el target que se llama localName que nos va a decir donde pulsar,\r\n    // podremos pulsar en el checkbox, label o boton de eliminar, pues tendremos que hacer condiciones segun donde pulsemos.\r\n    const nombreElemento    = evento.target.localName;\r\n    // Tengo que coger la li donde hago click para que cuando pulsemos el boton de eliminar borre toda la tarea\r\n    const tareaSeleccionada = evento.target.parentElement.parentElement;\r\n    // Cojo el id único de las tareas, este id está en el atributo de HTML data-id\r\n    const tareaId           = tareaSeleccionada.dataset.id;\r\n    // Una vez que tenemos toda la información haremos un condicional, si se pulsa en el check se llama al método marcarCompletado y\r\n    // si se pulsa el botón de elimminar se llama al método de borrar la tarea\r\n    if( nombreElemento === 'input' ){\r\n        listaTareas.marcarCompletado( tareaId );\r\n        // En el console vemos que va cambiando la propiedad completado pero no tacha la tarea, para hacer eso tenemos que jugar con las clases y añadirle y quitarle la clase completed al li\r\n        tareaSeleccionada.classList.toggle( 'completed' );        \r\n    }\r\n    if( nombreElemento === 'button' ){\r\n        listaTareas.eliminarTarea( tareaId );\r\n        ul.removeChild( tareaSeleccionada );\r\n    }\r\n    mostrarFooter();\r\n    mostrarPendientes();\r\n    mostrarBorrarCompletadas();\r\n});\r\n// Eliminar completados\r\nborrarCompletados.addEventListener('click', () => {\r\n    // Llamamos al método de la clase eliminar completados\r\n    listaTareas.eliminarCompletados();\r\n    // Recorremos la ul donde están los li, esta es un vector y con la propiedaad children puedo sacar el numero de elementos\r\n    // Tendremos que recorrer el vector al reves desde el ultimo elemento al primero, porque si lo recorremos al inicio y al final como se borra un elemento las posiciones del vector ya no coinciden\r\n    for ( let index = ul.children.length - 1; index >= 0; index-- ){\r\n        // Guardamos lo que hay en cada una de las posiciones en una variable\r\n        const elemento = ul.children[ index ];\r\n        // Hago un condicional en el que le digo si contiene la clase completed, si es verdad lo elimino de la lista\r\n        if( elemento.classList.contains('completed')){\r\n            elemento.remove();\r\n        } \r\n    }\r\n    mostrarFooter();\r\n    mostrarPendientes();\r\n    mostrarBorrarCompletadas();\r\n});\r\n\r\n// Evento para seleccionar los elementos completados y no completados\r\nfiltros.addEventListener('click', (evento) => {\r\n    // Recorremos las a y le quitamos el cuadrado cuando pulsamos en cualquier lado de la ul\r\n    filtrosMarco.forEach( (filtro) => filtro.classList.remove('selected') );\r\n    // Ponemos el marco en el elemento seleccionado\r\n    evento.target.classList.add('selected');\r\n    // Ponemos el texto que tiene el elemento selecciondo en una variable y despues hacemos un switch para cada uno de los casos\r\n    const textoFiltroSeleccionado = evento.target.text;\r\n    // Podriamos añadir una medida de seguridad  es que si pulso donde no hay elemento, osea, la constante texto está vacia que salga del evento\r\n    if (!textoFiltroSeleccionado){return}\r\n    // Tenemos que recorrer el vector para saber cuales están completadas y cuales no\r\n    for (elemento of ul.children){\r\n        \r\n        // El filtro del switch se lo asigna y se quite, además nos servirá para que funcione el boton de tareas ya que mostrará todas ellas\r\n        elemento.classList.remove('hidden');\r\n        // Según el boton que pulse ocultará las completadas o las que no lo estén\r\n        switch (textoFiltroSeleccionado) {\r\n        case 'Pendientes':\r\n            // Comprobamos si el elemento seleccionado tiene la clase \"completed\", si es así le asignamos la clase del css hiden que oculta los elementos con el display none\r\n            if (elemento.classList.contains('completed')){\r\n                elemento.classList.add('hidden');\r\n            }\r\n            break;\r\n            case 'Completadas':\r\n                // Comprobamos si el elemento seleccionado tiene la clase \"completed\", si es así le asignamos la clase del css hiden que oculta los elementos con el display none\r\n                if(!elemento.classList.contains('completed')){\r\n                    elemento.classList.add('hidden');\r\n                }\r\n            break;\r\n        }\r\n    }\r\n});\r\n// Añado el evento que al hacer doble clic sobre una label automaticamente la pueda modificar añadiendo el atributo contentEditable =\"true\"\r\nul.addEventListener('dblclick', (evento) => {\r\n    const nombreElemento = evento.target.localName;\r\n    const tareaSeleccionada = evento.target.parentElement.parentElement;\r\n    const tareaId = tareaSeleccionada.dataset.id;\r\n    // Accedemos a la label que hemos pulsado y le ponemos el contenteditable = true\r\n    if (nombreElemento === 'label'){\r\n        const etiquetaSeleccionada = tareaSeleccionada.children[0].children[1];\r\n        etiquetaSeleccionada.setAttribute('contenteditable',true);\r\n        etiquetaSeleccionada.setAttribute('style', 'border: 1px solid #000');\r\n        // Una vez que editamos la etiqueta ponemos un evento para que cuando pulsemos la tecla enter deje de ser editable\r\n        etiquetaSeleccionada.addEventListener('keypress', (evento) => {\r\n            if(evento.key === 'Enter'){\r\n                // Tenemos que coger el valor que hay dentro de la etiqueta y guardarlo en una constante para modificarlo en el vector\r\n                const textoLabel = etiquetaSeleccionada.innerHTML;\r\n                etiquetaSeleccionada.setAttribute('contenteditable', false);\r\n                etiquetaSeleccionada.removeAttribute('style');\r\n                // Tendríamos que modificar la tarea que hemos editado usando su id\r\n                listaTareas.listaTareas.forEach( (tarea) => {\r\n                    // Lo que hay en el atributo es texto y lo que hay en la clase es un numero\r\n                    if(tarea.id == tareaId) {\r\n                        tarea.tarea = textoLabel;\r\n                        // Faltaría actualizar el locaL Storage\r\n                        listaTareas.guardarLocalStorage();\r\n\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n});","// Importamos la clase que necesitamos\r\nimport './css/style.css';\r\n\r\n// Importamos la clase que necesitamos\r\nimport { ListaTareas } from './classes/index';\r\n\r\nimport { anadirtareaHTML, mostrarFooter, mostrarPendientes, mostrarBorrarCompletadas } from './js/components';\r\n\r\n//  ---------- LLAMADAS A LAS FUNCIONES ----------  //\r\nexport const listaTareas = new ListaTareas();\r\n// Tengo que llamar a la funcion que dibuja el HTML\r\nlistaTareas.listaTareas.forEach((tarea) => anadirtareaHTML(tarea));\r\nmostrarFooter();\r\nmostrarPendientes();\r\nmostrarBorrarCompletadas();","export class ListaTareas {\r\n    constructor() {\r\n        // El constructor va a ser un vector en el cual se almacenan todas las tareas que se crean e inicialmente estará vacio\r\n        // this.listaTareas = [];\r\n        this.cargarLocalStorage();\r\n        // // Guardo la key del localStorage\r\n        // this.key = 'tareas';\r\n    }\r\n    // El primer metodo que tiene que existir es el de añadir elementos a la lista de tareas\r\n    anadirTarea( tarea ) {\r\n        this.listaTareas.push( tarea );\r\n        this.guardarLocalStorage();\r\n    }\r\n    // Otro metodo será eliminar el elemento seleccionado de la lista de tareas\r\n    eliminarTarea(id) {\r\n        this.listaTareas = this.listaTareas.filter( (tarea) => tarea.id != id);\r\n        this.guardarLocalStorage();\r\n    }\r\n    // Otro metodo será el de eliminar todos los elementos que hemos completado\r\n    eliminarCompletados() {\r\n        // Filtraremos todos los elementos que no tengan this.completado = true\r\n        this.listaTareas = this.listaTareas.filter( (tarea) => tarea.completado === false);\r\n        this.guardarLocalStorage();\r\n    }\r\n    marcarCompletado(id) {\r\n        //Para marcar completado tendré que recorrer el vector y comprobar cada uno de los id con el que recibiré del evento y cuando coincidan le tendo que cambiar el estado\r\n        for(const tarea of this.listaTareas){\r\n            if(tarea.id == id) {\r\n                // En tarea id voy a tener un numero que es el que se crea automaticamente cuando creamos la tarea y recibiremos un id de tipo texto que estará guardado en el atributo data-id\r\n                // Cuando pulso en el checkbox cambiará de estado (si está true a falso o al revés)\r\n                tarea.completado = !tarea.completado;\r\n                this.guardarLocalStorage();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    guardarLocalStorage() {\r\n        localStorage.setItem('tareas', JSON.stringify(this.listaTareas));\r\n    }\r\n    cargarLocalStorage() {\r\n        // // Cuando cargamos datos del localStorage tenemos dos posibilidades, si no hay nada creamos un vector vacío y si hay algo cargamos los datos del local. Esto servirá para que\r\n        // // en el constructor llamemos a esta funcion\r\n        // if (localStorage.getItem('tareas')){\r\n        //     this.listaTareas = JSON.parse(localStorage.getItem('tareas')); \r\n        // } else {\r\n        //     this.listaTareas = [];\r\n        // }\r\n        this.listaTareas = (localStorage.getItem ('tareas') ) ? (JSON.parse (localStorage.getItem ('tareas') ) ) : ( [ ] );              \r\n    }\r\n}"],"sourceRoot":""}